import { SubRepository } from "../../repositories/sub.repository.js";
import dotenv from "dotenv";
import { v2 as cloudinary } from 'cloudinary';
import fs from 'fs';
import path from 'path';
import { get } from "http";

const subRepo = new SubRepository();

class subService {
  constructor() {
    dotenv.config();
  }

  async getSubId(id) {
    const getSub = await subRepo.getSubId({ _id: id });
    if(!getSub) {
      throw new Error('Kh√¥ng c√≥ SubBroard n√†y!')
    }
    return getSub;
  }
  async updateSub(id, update) {
    const getSub = await subRepo.getSubId(id);
    if (!getSub) {
      throw new Error("Kh√¥ng c√≥ Subboard n√†y!");
    }

    const subInfo = {
      name: update.name || subInfo.name,
    };

    const updateSub = await subRepo.updateSub(id, { $set: subInfo });
    if (!updateSub) {
      throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    }
    return {
      name: update.name || updateSub.name,
    };
  }

  async deleteSub(id, user) {
    if(user.role !== 'admin') {
      throw new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn n√†y!')
    }
    const deleteSub = await subRepo.deleteSub(id)
    return deleteSub
  }

  async uploadImages(subId, inputPath) {
    try {
      cloudinary.config({
        cloud_name: process.env.CLOUD_NAME,
        api_key: process.env.API_KEY,
        api_secret: process.env.API_SECRET,
      });
  
      console.log('üì¶ Cloudinary Config Loaded');
  
      const subCheck = await subRepo.getSubId(subId);
      if (!subCheck) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y Sub Board v·ªõi ID: ${subId}`);
      }
  
      const uploaded = [];
  
      const isUrl = inputPath.startsWith('http://') || inputPath.startsWith('https://');
      if (isUrl) {
        console.log(`üåê ƒêang upload t·ª´ URL: ${inputPath}`);
        const uploadResult = await cloudinary.uploader.upload(inputPath, {
          folder: 'subboard_backgrounds',
          resource_type: 'image',
        });
  
        await subRepo.updateSub(subId, {
          $push: { background: uploadResult.secure_url },
        });
  
        uploaded.push(uploadResult.secure_url);
  
        return {
          success: true,
          message: 'ƒê√£ upload ·∫£nh t·ª´ URL th√†nh c√¥ng',
          images: uploaded,
        };
      }
  
      if (!fs.existsSync(inputPath)) {
        throw new Error(`ƒê∆∞·ªùng d·∫´n kh√¥ng t·ªìn t·∫°i: ${inputPath}`);
      }
  
      const stats = fs.statSync(inputPath);
      if (stats.isFile()) {
        console.log(`üñºÔ∏è ƒêang upload file: ${inputPath}`);
        const uploadResult = await cloudinary.uploader.upload(inputPath, {
          folder: 'subboard_backgrounds',
          resource_type: 'image',
        });
  
        await subRepo.updateSub(subId, {
          $push: { background: uploadResult.secure_url },
        });
  
        uploaded.push(uploadResult.secure_url);
      } else if (stats.isDirectory()) {
        const files = fs.readdirSync(inputPath).filter((file) =>
          file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png')
        );
  
        if (files.length === 0) {
          return {
            success: false,
            message: 'Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong th∆∞ m·ª•c',
            images: [],
          };
        }
  
        console.log(`üìÅ T√¨m th·∫•y ${files.length} ·∫£nh trong th∆∞ m·ª•c`);
  
        for (const file of files) {
          const filePath = path.join(inputPath, file);
          try {
            console.log(`üì§ ƒêang upload: ${file}...`);
            const uploadResult = await cloudinary.uploader.upload(filePath, {
              folder: 'subboard_backgrounds',
              resource_type: 'image',
            });
  
            await subRepo.updateSub(subId, {
              $push: { background: uploadResult.secure_url },
            });
  
            uploaded.push(uploadResult.secure_url);
          } catch (err) {
            console.error(`‚ùå L·ªói khi upload ·∫£nh ${file}:`, err.message);
          }
        }
      } else {
        throw new Error(`Lo·∫°i ƒë∆∞·ªùng d·∫´n kh√¥ng h·ªó tr·ª£: ${inputPath}`);
      }
  
      return {
        success: uploaded.length > 0,
        message:
          uploaded.length > 0
            ? `ƒê√£ upload ${uploaded.length} ·∫£nh th√†nh c√¥ng`
            : 'Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c upload th√†nh c√¥ng',
        images: uploaded,
      };
    } catch (error) {
      console.error('‚ùå L·ªói:', error.message);
      return {
        success: false,
        message: `L·ªói khi upload ·∫£nh: ${error.message}`,
        images: [],
      };
    }
  }

  restrictTo(...roles) {
    return async (user) => {
      if (!roles.includes(user.role)) {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y");
      }
      return true;
    };
  }
}

export default new subService();
